import { Popup } from "popup.slint";
import { Style } from "style.slint";
import { AppConfig } from "globals.slint";

import { VerticalBox, LineEdit, Button, ComboBox, Palette } from "std-widgets.slint";


export component AppConfigPopup inherits Popup {
    title: "Config";

    VerticalBox {
        alignment: space-between;

        GridLayout {
            spacing: Style.size.spacing;

            Row {
                Text {
                    font-size: Style.font.config-edit;
                    vertical-alignment: center;
                    text: "diff tool";
                }

                diff_tool_edit := LineEdit {
                    height: Style.size.control_height;
                    text <=> AppConfig.diff_tool;
                }
            }

            Row {
                Text {
                    font-size: Style.font.config-edit;
                    vertical-alignment: center;
                    text: "editor";
                }

                editor_edit := LineEdit {
                    height: Style.size.control_height;
                    text <=> AppConfig.editor;
                }
            }

            Row {
                Text {
                    font-size: Style.font.config-edit;
                    vertical-alignment: center;
                    text: "editor args";
                }

                editor_args_edit := LineEdit {
                    height: Style.size.control_height;
                    text <=> AppConfig.editor_args;
                }
            }

            Row {
                Text {
                    font-size: Style.font.config-edit;
                    vertical-alignment: center;
                    text: "color theme";
                }

                ComboBox {
                    function to_string(color_scheme: ColorScheme) -> string {
                        return color_scheme == ColorScheme.dark ? "Dark" : "Light";
                    }
                    function to_theme(color_scheme_string: string) -> ColorScheme {
                        return color_scheme_string == to_string(ColorScheme.dark) ? ColorScheme.dark : ColorScheme.light;
                    }

                    model: [to_string(ColorScheme.dark), to_string(ColorScheme.light)];
                    current-index: to_theme(AppConfig.color_scheme) == ColorScheme.dark ? 0 : 1;
                    current-value: AppConfig.color_scheme;
                    selected(current-value) => {
                        AppConfig.color_scheme = current-value;
                        Palette.color-scheme = to_theme(current-value);
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: Style.size.spacing;
            alignment: end;

            Button {
                text: "Cancel";
                clicked => {
                    root.close()
                }
            }

            Button {
                text: "Save";
                clicked => {
                    AppConfig.save();
                    root.close();
                }
            }
        }
    }
}
