import { GroupBox, ListView, CheckBox, Button, Palette, LineEdit, VerticalBox, HorizontalBox, ComboBox } from "std-widgets.slint";

import { Style } from "style.slint";
import { ChangeTypeUtils, SortCriteria, Diff, Notes, NoteItem } from "globals.slint";

export component FileDiffView inherits VerticalBox {
    callback open-file-notes-popup(string);

    private property <int> checked_id: -1;

    spacing: Style.spacing;

    HorizontalLayout {
        spacing: Style.spacing;

        LineEdit {
            horizontal-alignment: left;
            placeholder-text: "Filter paths";
            changed text => { Diff.filter-file-diff(self.text); }
        }
        ComboBox {
            width: 220px;
            model: ["Name", "Extension"];
            current-value: {
                if Diff.current_sort_criteria == SortCriteria.Name {
                    return "Name";
                }
                return "Extension";
            }
            selected(current-criteria) => {
                if current-criteria == "Name" {
                    Diff.set-sort-criteria(SortCriteria.Name);
                }
                else {
                    Diff.set-sort-criteria(SortCriteria.Extension);
                }
            }
        }
    }
    ListView {
        padding-right: 0;
        padding-left: 0;
        for data[idx] in Diff.diff_model: Rectangle {
            property <[NoteItem]> notes: Notes.file-notes-model(data.text);

            background: checked_id == data.id ? #333232 : Palette.background;
            height: Style.control_height;

            HorizontalLayout {
                alignment: space-between;
                spacing: 2px;

                file-text := Text {
                    overflow: elide;
                    font-size: 14px;
                    text: data.text;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                }
                buttons-layout := HorizontalLayout {
                    width: 220px;

                    Image {
                        source: ChangeTypeUtils.to_icon(data.change_type);
                        horizontal-alignment: center;
                    }
                    HorizontalLayout {
                        padding-top: Style.spacing / 2;
                        padding-bottom: Style.spacing / 2;
                        spacing: Style.spacing;

                        Rectangle {
                            background: #5e8262;
                            border-radius: 5px;
                            width: 40px;
                            visible: data.added-lines != 0;

                            Text {
                                font-size: 14px;
                                vertical-alignment: center;
                                text: "\{data.added-lines != -1 ? data.added-lines : "??"}";
                            }
                        }
                        Rectangle {
                            background: #B06161;
                            border-radius: 5px;
                            width: 40px;
                            visible: data.removed-lines != 0;

                            Text {
                                font-size: 14px;
                                vertical-alignment: center;
                                text: "\{data.removed-lines != -1 ? data.removed-lines : "??"}";
                            }
                        }
                        Button {
                            icon: self.checked ? @image-url("../assets/icons/checked.svg") : @image-url("../assets/icons/unchecked.svg");
                            checked: data.is_reviewed;
                            clicked => { Diff.toggle-is-reviewed(data.id) }
                        }
                        property <Point> p: {
                            x: (root.width - bb.width) - 280px,
                            y: bb.height
                        };
                        bb := Button {
                            icon: @image-url("../assets/icons/menu.svg");
                            clicked => { action_popup.show(); }
                        }
                        action_popup := PopupWindow {
                            private property <length> delegate_height: 30px;
                            private property <[string]> action_model: ["diff", "open", "notes"];

                            x: bb.x - (self.width - bb.width);
                            y: bb.height + Style.border_width;
                            width: Style.control_width;
                            height: action_model.length * delegate_height;
                            close-policy: close-on-click-outside;

                            Rectangle {
                                width: 100%;
                                height: 100%;
                                background: Style.popup_background;
                                border-color: Style.popup_border_color;
                                border-width: Style.border_width;

                                VerticalLayout {
                                    for action[idx] in action_model: VerticalLayout {
                                        height: delegate_height;
                                        Rectangle {
                                            background: ta.has-hover ? #4f4b4b : Style.popup_background;
                                            border-color: Style.popup_border_color;
                                            border-width: Style.border_width;

                                            Text {
                                                text: action;
                                            }
                                            ta := TouchArea {
                                                clicked => {
                                                    if (action == "notes") {
                                                        root.open-file-notes-popup(data.text);
                                                    }
                                                    if (action == "diff") {
                                                        Diff.open-file-diff(data.id);
                                                    }
                                                    if (action == "open") {
                                                        Diff.open-file(data.text);
                                                    }
                                                    action_popup.close();
                                                }
                                            }
                                        }
                                        if idx < (action_model.length - 1) : Rectangle {
                                            height: 1px;
                                            width: 100%;
                                            background: #4f4b4b;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            TouchArea {
                x: 0;
                y: 0;
                width: parent.width - buttons-layout.width;
                clicked => { checked_id = data.id }
            }
        }
    }
}
