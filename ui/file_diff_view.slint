import { GroupBox, ListView, CheckBox, Button, Palette, LineEdit, VerticalBox, HorizontalBox, ComboBox } from "std-widgets.slint";

import { Style } from "style.slint";
import { ChangeTypeUtils, SortCriteria, Diff, Notes, NoteItem, FilterReviewState } from "globals.slint";
import { FileNoteDelegate } from "file_note_delegate.slint";
import { ImageButton } from "image_button.slint";

export component FileDiffView inherits VerticalLayout {
    private property <int> selected_id: -1;
    private property <int> extended_file_id: -1;
    private property <int> model_count: Diff.diff_model.length;
    private property <bool> is_selected_id_in_model: true;
    changed selected_id => {
        if (selected_id != -1 && selected_id != extended_file_id) {
            extended_file_id = -1;
        }
    }
    changed model_count => {
        if (model_count > 0 && selected_id != -1) {
            is_selected_id_in_model = Diff.diff-model-contains-id(selected_id);
        }
    }
    changed is_selected_id_in_model => {
        if (!is_selected_id_in_model && selected_id != -1) {
            selected_id = -1;
        }
        if (!is_selected_id_in_model && extended_file_id != -1) {
            extended_file_id = -1;
        }
    }
    function select_id(id: int) {
        if (id != root.selected_id) {
            selected_id = id;
        }
    }
    spacing: Style.size.spacing;
    HorizontalLayout {
        spacing: Style.size.spacing;

        Image {
            source: @image-url("../assets/icons/filter_on.svg");
            colorize: Palette.foreground;
            width: Style.size.image_width;
        }
        LineEdit {
            horizontal-alignment: left;
            placeholder-text: "Filter paths";
            changed text => {
                Diff.filter-file-diff(self.text);
            }
        }
        ComboBox {
            horizontal-stretch: 0;
            model: ["Unfiltered", "Done", "Open"];
            current-value: {
                if Diff.current_filter_review_state == FilterReviewState.Unfiltered {
                    return "Unfiltered";
                }
                if Diff.current_filter_review_state == FilterReviewState.Done {
                    return "Done";
                }
                if Diff.current_filter_review_state == FilterReviewState.Open {
                    return "Open";
                }
                return "invalid";
            }
            selected(current-filter-review-state) => {
                if current-filter-review-state == "Unfiltered" {
                    Diff.set-filter-review-state(FilterReviewState.Unfiltered);
                }
                if current-filter-review-state == "Done" {
                    Diff.set-filter-review-state(FilterReviewState.Done);
                }
                if current-filter-review-state == "Open" {
                    Diff.set-filter-review-state(FilterReviewState.Open);
                }
            }
        }
        Image {
            source: @image-url("../assets/icons/sort.svg");
            colorize: Palette.foreground;
            width: Style.size.image_width;
        }
        ComboBox {
            horizontal-stretch: 0;
            model: ["Name", "Extension", "IsDone"];
            current-value: {
                if Diff.current_sort_criteria == SortCriteria.Name {
                    return "Name";
                }
                if Diff.current_sort_criteria == SortCriteria.IsDone {
                    return "IsDone";
                }
                return "Extension";
            }
            selected(current-criteria) => {
                if current-criteria == "Name" {
                    Diff.set-sort-criteria(SortCriteria.Name);
                }
                if current-criteria == "IsDone" {
                    Diff.set-sort-criteria(SortCriteria.IsDone);
                }
                if current-criteria == "Extension" {
                    Diff.set-sort-criteria(SortCriteria.Extension);
                } 
            }
        }
    }

    ListView {
        for data[idx] in Diff.diff_model: Rectangle {
            property <[NoteItem]> notes: Notes.file-notes-model(data.text);
            states [
                selected when selected_id == data.id: {
                    background: Style.palette.selected;
                    border-width: Style.size.border_width;
                    border-radius: Style.size.border_radius;
                }
            ]
            TouchArea {
                clicked => {
                    root.select_id(data.id)
                }
                double-clicked => {
                    Diff.open-file-diff(data.id)
                }
                VerticalLayout {
                    padding-left: Style.size.spacing;
                    padding-right: Style.size.spacing / 2;
                    spacing: Style.size.spacing;
                    HorizontalLayout {
                        height: Style.size.delegate_height;
                        alignment: space-between;
                        spacing: 2px;
                        file-text := Text {
                            overflow: elide;
                            font-size: 14px;
                            text: data.text;
                            vertical-alignment: center;
                            horizontal-alignment: left;
                        }

                        buttons-layout := HorizontalLayout {
                            Image {
                                source: ChangeTypeUtils.to_icon(data.change_type);
                                horizontal-alignment: center;
                                colorize: Palette.foreground;
                            }

                            HorizontalLayout {
                                padding-top: Style.size.spacing / 2;
                                padding-bottom: Style.size.spacing / 2;
                                spacing: Style.size.spacing;
                                Rectangle {
                                    background: Style.palette.lines-added;
                                    border-radius: 5px;
                                    width: 40px;
                                    visible: data.added-lines != 0;
                                    Text {
                                        font-size: 14px;
                                        vertical-alignment: center;
                                        text: "\{data.added-lines != -1 ? data.added-lines : "??"}";
                                    }
                                }

                                Rectangle {
                                    background: Style.palette.lines-removed;
                                    border-radius: 5px;
                                    width: 40px;
                                    visible: data.removed-lines != 0;
                                    Text {
                                        font-size: 14px;
                                        vertical-alignment: center;
                                        text: "\{data.removed-lines != -1 ? data.removed-lines : "??"}";
                                    }
                                }

                                ImageButton {
                                    source: data.is_reviewed ? @image-url("../assets/icons/checked.svg") : @image-url("../assets/icons/unchecked.svg");
                                    enabled: root.selected_id == data.id;
                                    clicked => {
                                        Diff.toggle-is-reviewed(data.id)
                                    }
                                }

                                property <Point> p: { x: (root.width - bb.width) - 280px, y: bb.height };
                                bb := ImageButton {
                                    source: @image-url("../assets/icons/open_editor.svg");
                                    enabled: root.selected_id == data.id;
                                    clicked => {
                                        Diff.open-file(data.text)
                                    }
                                }

                                ImageButton {
                                    source: root.extended_file_id == data.id ? @image-url("../assets/icons/drop_up.svg") : @image-url("../assets/icons/drop_down.svg");
                                    enabled: root.selected_id == data.id;
                                    highlighted: notes.length > 0;
                                    clicked => {
                                        root.extended_file_id = root.extended_file_id == data.id ? -1 : data.id;
                                    }
                                }
                            }
                        }
                    }

                    if root.extended_file_id == data.id: VerticalBox {
                        LineEdit {
                            height: Style.size.control_height;
                            placeholder-text: "Add comment here...";
                            accepted => {
                                Notes.add-note(self.text, data.text);
                                self.text = "";
                            }
                        }

                        for note_item in notes: FileNoteDelegate {
                            note: note-item;
                        }
                    }
                }
            }
        }
    }
}
